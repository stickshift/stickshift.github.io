################################################################################
# Project: stickshift
#
################################################################################

#-------------------------------------------------------------------------------
# Build System
#-------------------------------------------------------------------------------

[build-system]

requires = ["hatchling"]
build-backend = "hatchling.build"

#-------------------------------------------------------------------------------
# Project
#-------------------------------------------------------------------------------

[project]

name = "stickshift"
requires-python = ">=3.12"

authors = [
  {name = "Andrew Young", email = "joven@alum.wpi.edu"},
]

readme = "README.md"

classifiers = [
  "Programming Language :: Python"
]

dynamic = ["version"]

dependencies = [
  "click",
  "fairscale",
  "fire",
  "blobfile",
  "ipywidgets",
  "jupyterlab",
  "jupyterlab_spellchecker",
  "llama_models",
  "numpy<2.0",
  "pandas",
  "pydantic",
  "scikit-learn",
  "seaborn",
  "tokenizers",
  "transformers",
  "torch",
  "tqdm",

  "pip",
  "build",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "ruff",
]

[project.urls]

Repository = "https://github.com/stickshift/stickshift.github.io"

################################################################################
# Build Backend
#

[tool.hatch.version]
source = "env"
variable = "PY_VERSION"
################################################################################
# Tools
#

#-------------------------------------------------------------------------------
# Ruff
#
#   We use ruff for both linting and formatting. Ruff comes with an extensive
#   set of default options. Please review the defaults at following link before
#   modifying.
#
#   https://docs.astral.sh/ruff/configuration/
#
#-------------------------------------------------------------------------------

[tool.ruff]

# Stretch line length to 150
line-length = 150

# Extend default exclude
extend-exclude = [
  ".build/*",
  ".cache/*",
  "*.ipynb",
]

# lint
# ~~~~

[tool.ruff.lint]

select = [
  "A001",  # flake8-builtins / builtin-variable-shadowing
  "A002",  # flake8-builtins / builtin-argument-shadowing
  "ARG",  # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",  # pydocstyle
  "E",  # pycodestyle
  "F",  # pyflakes
  "FURB",  # refurb
  "I",  # isort
  "N",  # pep8-naming
  "NPY",  # NumPy-specific rules
  "PERF",  # Perflint
  "PD",  # pandas-vet
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "RET",  # flake8-return
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "TID",  # flake8-tidy-imports
  "TD",  # flake8-todos
  "W",  # pycodestyle warnings
]

ignore = [
  "A002",  # allow builtin shadowing
  "D100",  # allow modules without docstrings
  "D203",  # no-blank-line-before-class
  "D213",  # multi-line-summary-second-line
  "D417",  # disable google requirement for docs on every argument
  "N803",  # allow uppercase args like X
  "N806",  # allow uppercase variables like X
  "PD901",  # allow df
  "PLC2801",  # allow dunder calls
  "PLR6104",  # Ignore suggestions to use mutating |=
  "PLW3201",  # ignore dunder spelling
  "PT011",  # Allow broad pytest.raises
  "PT022",  # Ignore dangerous rule on yield and cleanup
  "PT013",  # Allow importing types from pytest
  "RET504",  # Allow assignment before return
  "RUF029",  # Allow functions marked async even if not needed
  "RUF100",  # Allow blanket noqa
  "TD002",  # Don't require author on to do comments
  "TD003",  # Don't require issue links on to do comments
]

# lint / isort
# ~~~~~~~~~~~~

[tool.ruff.lint.isort]

# Define custom packages as first-party
known-first-party = [
  "xformers",
]

# Sort the imports by module, independent of import style.
force-sort-within-sections = true

# Separate tests imports into auxiliary block(s) of imports.
forced-separate = ["tests"]

# lint / pydocstyle
# ~~~~~~~~~~~~~~~~~

[tool.ruff.lint.pydocstyle]
convention = "google"

# lint / pylint
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

[tool.ruff.lint.pylint]

# Boost max locals
max-locals = 20

# Boost max nested args
max-args = 8

# Boost max nested blocks
max-nested-blocks = 8

# lint / flake8-pytest-style
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
[tool.ruff.lint.flake8-pytest-style]

fixture-parentheses = false
mark-parentheses = false

# lint / per-file-ignores
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

[tool.ruff.lint.per-file-ignores]

# Package modules
"__init__.py" = [
  "D104",  # allow skip docstrings
]

# conftest modules
"conftest.py" = [
  "D100",  # allow skip docstrings
]

# Test ignores
"tests/**/*" = [
  "ARG001",  # unused function args
  "B017",  # pytest.raises(Exception)
  "D",  # skip docstrings
  "F811",  # redefined-while-unused
  "PLR2004",  # use magic values
  "PT004",  # not return anything w/o leading underscore
  "TID252",  # use relative imports
]
